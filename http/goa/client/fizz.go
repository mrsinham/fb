// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "My fizzbuzz api": fizz Resource Client
//
// Command:
// $ goagen
// --design=github.com/mrsinham/fb/http/design
// --out=$(GOPATH)/src/github.com/mrsinham/fb/http/goa
// --version=v1.3.0

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// BuzzFizzPath computes a request path to the buzz action of fizz.
func BuzzFizzPath() string {

	return fmt.Sprintf("/fizz/buzz")
}

// given the two string and the fizzbuzz param, you will have the fizzbuzz algorithm applied : a json string array from 1 to limit where the offset is replaced with string1 when the offset is a multiplier of int1 and replaced with string2 if the offset is a multiplier of int2. If the offset is a multiplier of both int1 and int2, the offset will be replaced by string1+string2
func (c *Client) BuzzFizz(ctx context.Context, path string, int1 int, int2 int, limit int, string1 string, string2 string) (*http.Response, error) {
	req, err := c.NewBuzzFizzRequest(ctx, path, int1, int2, limit, string1, string2)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewBuzzFizzRequest create the request corresponding to the buzz action endpoint of the fizz resource.
func (c *Client) NewBuzzFizzRequest(ctx context.Context, path string, int1 int, int2 int, limit int, string1 string, string2 string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp2 := strconv.Itoa(int1)
	values.Set("int1", tmp2)
	tmp3 := strconv.Itoa(int2)
	values.Set("int2", tmp3)
	tmp4 := strconv.Itoa(limit)
	values.Set("limit", tmp4)
	values.Set("string1", string1)
	values.Set("string2", string2)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
